// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repository

import (
	"context"
	"dbAiplus/internal/app/models"
	"sync"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
//	func TestSomethingThatUsesRepository(t *testing.T) {
//
//		// make and configure a mocked Repository
//		mockedRepository := &RepositoryMock{
//			CreateEmployeeFunc: func(ctx context.Context, employee models.Employee) error {
//				panic("mock out the CreateEmployee method")
//			},
//		}
//
//		// use mockedRepository in code that requires Repository
//		// and then make assertions.
//
//	}
type RepositoryMock struct {
	// CreateEmployeeFunc mocks the CreateEmployee method.
	CreateEmployeeFunc func(ctx context.Context, employee models.Employee) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateEmployee holds details about calls to the CreateEmployee method.
		CreateEmployee []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Employee is the employee argument value.
			Employee models.Employee
		}
	}
	lockCreateEmployee sync.RWMutex
}

// CreateEmployee calls CreateEmployeeFunc.
func (mock *RepositoryMock) CreateEmployee(ctx context.Context, employee models.Employee) error {
	if mock.CreateEmployeeFunc == nil {
		panic("RepositoryMock.CreateEmployeeFunc: method is nil but Repository.CreateEmployee was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Employee models.Employee
	}{
		Ctx:      ctx,
		Employee: employee,
	}
	mock.lockCreateEmployee.Lock()
	mock.calls.CreateEmployee = append(mock.calls.CreateEmployee, callInfo)
	mock.lockCreateEmployee.Unlock()
	return mock.CreateEmployeeFunc(ctx, employee)
}

// CreateEmployeeCalls gets all the calls that were made to CreateEmployee.
// Check the length with:
//
//	len(mockedRepository.CreateEmployeeCalls())
func (mock *RepositoryMock) CreateEmployeeCalls() []struct {
	Ctx      context.Context
	Employee models.Employee
} {
	var calls []struct {
		Ctx      context.Context
		Employee models.Employee
	}
	mock.lockCreateEmployee.RLock()
	calls = mock.calls.CreateEmployee
	mock.lockCreateEmployee.RUnlock()
	return calls
}
